import { extract_types, write_definitions, reset_types, type Type } from '../src/typing'
import { file_exists, delete_file } from '../src/utils'
import fs from 'fs/promises'
import * as z from 'zod'

test('write_definitions writes file', async () => {
  const path = 'test/fixtures/collections.d.ts'
  const types: Type[] = [
    { name: 'title', type: 'string', optional: false },
    { name: 'summary', type: 'string', optional: true }
  ]

  await delete_file(path)
  await write_definitions(path, "posts", types)

  const data = await fs.readFile(path, 'utf-8')

  expect(data).toEqual(`/*
 * Generated by vite-plugin-collections
 *
*/
declare module "#posts" {
  export type Post = {
    title: string
    summary?: string
  }

  export function list(): Promise<Post[]>
  export function get(id: string): Promise<Post>
}`)
})

describe('extract_types', () => {
  test('returns types, when types are passed', async () => {
    const schema = z.object({
      title: z.string(),
      summary: z.string().optional(),
      tags: z.array(z.string()),
      keywords: z.array(z.string()).optional(),
      author: z.enum(["josh", "jonathan"])
    })

    const types = await extract_types(schema)

    expect(types).toEqual([
      {
        name: "id",
        optional: false,
        type: "string",
      },
      {
        name: "html",
        optional: false,
        type: "string",
      },
      {
        name: "title",
        optional: false,
        type: "string",
      },
      {
        name: "summary",
        optional: true,
        type: "string",
      },
      {
        name: "tags",
        optional: false,
        type: "string[]",
      },
      {
        name: "keywords",
        optional: true,
        type: "string[]",
      },
      {
        name: "author",
        optional: false,
        type: '"josh" | "jonathan"',
      },
    ])

  })
  test('returns default types, when none are passed', async () => {
    const types = await extract_types()

    expect(types).toEqual([
      {
        name: "id",
        optional: false,
        type: "string",
      },
      {
        name: "html",
        optional: false,
        type: "string",
      },
    ])
  })
})

describe('reset_types', () => {
  const path = 'test/fixtures/collections.d.ts'

  test('resets when first time', async () => {
    await fs.appendFile(path, 'test')
    await reset_types(path)

    expect(await file_exists(path)).toEqual(false)
  })

  test('does nothing when not first time', async () => {
    await reset_types(path)
    await fs.appendFile(path, 'test')
    await reset_types(path)

    expect(await file_exists(path)).toEqual(true)
  })
})
